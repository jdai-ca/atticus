import jsPDF from 'jspdf';
import { Conversation } from '../types';

export async function exportConversationToPDF(conversation: Conversation): Promise<string> {
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  let yPosition = margin;

  // Header
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Atticus Legal Assistant', margin, yPosition);
  yPosition += 10;

  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Conversation: ${conversation.title}`, margin, yPosition);
  yPosition += 6;

  const dateStr = new Date(conversation.createdAt).toLocaleString();
  pdf.text(`Date: ${dateStr}`, margin, yPosition);
  yPosition += 6;

  if (conversation.practiceArea) {
    pdf.text(`Practice Area: ${conversation.practiceArea}`, margin, yPosition);
    yPosition += 6;
  }

  pdf.text(`Provider: ${conversation.provider}`, margin, yPosition);
  yPosition += 10;

  // Divider
  pdf.setDrawColor(200, 200, 200);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 10;

  // Messages
  for (const message of conversation.messages) {
    // Check if we need a new page
    if (yPosition > pageHeight - 30) {
      pdf.addPage();
      yPosition = margin;
    }

    // Message header
    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'bold');
    const role = message.role === 'user' ? 'You' : 'Assistant';
    const timestamp = new Date(message.timestamp).toLocaleTimeString();
    pdf.text(`${role} (${timestamp})`, margin, yPosition);
    yPosition += 7;

    // Message content
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');

    // Split text to fit width
    const lines = pdf.splitTextToSize(message.content, maxWidth);

    for (const line of lines) {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(line, margin, yPosition);
      yPosition += 5;
    }

    // Attachments
    if (message.attachments && message.attachments.length > 0) {
      yPosition += 3;
      pdf.setFontSize(9);
      pdf.setTextColor(100, 100, 100);
      for (const attachment of message.attachments) {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = margin;
        }
        pdf.text(`ðŸ“Ž ${attachment.name} (${formatFileSize(attachment.size)})`, margin + 5, yPosition);
        yPosition += 5;
      }
      pdf.setTextColor(0, 0, 0);
    }

    yPosition += 8;
  }

  // Footer
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(
      `Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
    pdf.text(
      'Generated by Atticus Legal Assistant',
      pageWidth / 2,
      pageHeight - 6,
      { align: 'center' }
    );
  }

  // Return as base64
  return pdf.output('datauristring').split(',')[1];
}

function formatFileSize(bytes: number): string {
  if (bytes < 1024) return bytes + ' B';
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
  return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}

export async function downloadPDF(conversation: Conversation): Promise<void> {
  try {
    const pdfData = await exportConversationToPDF(conversation);
    const filename = `atticus-${conversation.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${Date.now()}.pdf`;

    const result = await window.electronAPI.savePDF({
      filename,
      data: pdfData,
    });

    if (result.success) {
      console.log('PDF saved:', result.filepath);
    }
  } catch (error) {
    console.error('Error downloading PDF:', error);
    throw error;
  }
}
